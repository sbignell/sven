"use strict";exports.find=function(a,b,c){a.query.username=a.query.username?a.query.username:"",a.query.limit=a.query.limit?parseInt(a.query.limit,null):20,a.query.page=a.query.page?parseInt(a.query.page,null):1,a.query.sort=a.query.sort?a.query.sort:"_id";var d={};a.query.username&&(d.username=new RegExp("^.*?"+a.query.username+".*$","i")),a.query.isActive&&(d.isActive=a.query.isActive),a.query.roles&&"admin"===a.query.roles&&(d["roles.admin"]={$exists:!0}),a.query.roles&&"account"===a.query.roles&&(d["roles.account"]={$exists:!0}),a.app.db.models.User.pagedFind({filters:d,keys:"username email isActive",limit:a.query.limit,page:a.query.page,sort:a.query.sort},function(d,e){return d?c(d):void(a.xhr?(b.header("Cache-Control","no-cache, no-store, must-revalidate"),e.filters=a.query,b.send(e)):(e.filters=a.query,b.render("admin/users/index",{data:{results:JSON.stringify(e)}})))})},exports.read=function(a,b,c){a.app.db.models.User.findById(a.params.id).populate("roles.admin","name.full").populate("roles.account","name.full").exec(function(d,e){return d?c(d):void(a.xhr?b.send(e):b.render("admin/users/details",{data:{record:escape(JSON.stringify(e))}}))})},exports.create=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.body.username?/^[a-zA-Z0-9\-\_]+$/.test(a.body.username)?void c.emit("duplicateUsernameCheck"):(c.outcome.errors.push("only use letters, numbers, -, _"),c.emit("response")):(c.outcome.errors.push("Please enter a username."),c.emit("response"))}),c.on("duplicateUsernameCheck",function(){a.app.db.models.User.findOne({username:a.body.username},function(a,b){return a?c.emit("exception",a):b?(c.outcome.errors.push("That username is already taken."),c.emit("response")):void c.emit("createUser")})}),c.on("createUser",function(){var b={username:a.body.username,search:[a.body.username]};a.app.db.models.User.create(b,function(a,b){return a?c.emit("exception",a):(c.outcome.record=b,c.emit("response"))})}),c.emit("validate")},exports.update=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.body.isActive||(a.body.isActive="no"),a.body.username?/^[a-zA-Z0-9\-\_]+$/.test(a.body.username)||(c.outcome.errfor.username="only use letters, numbers, '-', '_'"):c.outcome.errfor.username="required",a.body.email?/^[a-zA-Z0-9\-\_\.\+]+@[a-zA-Z0-9\-\_\.]+\.[a-zA-Z0-9\-\_]+$/.test(a.body.email)||(c.outcome.errfor.email="invalid email format"):c.outcome.errfor.email="required",c.hasErrors()?c.emit("response"):void c.emit("duplicateUsernameCheck")}),c.on("duplicateUsernameCheck",function(){a.app.db.models.User.findOne({username:a.body.username,_id:{$ne:a.params.id}},function(a,b){return a?c.emit("exception",a):b?(c.outcome.errfor.username="username already taken",c.emit("response")):void c.emit("duplicateEmailCheck")})}),c.on("duplicateEmailCheck",function(){a.app.db.models.User.findOne({email:a.body.email.toLowerCase(),_id:{$ne:a.params.id}},function(a,b){return a?c.emit("exception",a):b?(c.outcome.errfor.email="email already taken",c.emit("response")):void c.emit("patchUser")})}),c.on("patchUser",function(){var b={isActive:a.body.isActive,username:a.body.username,email:a.body.email.toLowerCase(),search:[a.body.username,a.body.email]};a.app.db.models.User.findByIdAndUpdate(a.params.id,b,function(a,b){return a?c.emit("exception",a):void c.emit("patchAdmin",b)})}),c.on("patchAdmin",function(b){if(b.roles.admin){var d={user:{id:a.params.id,name:b.username}};a.app.db.models.Admin.findByIdAndUpdate(b.roles.admin,d,function(a){return a?c.emit("exception",a):void c.emit("patchAccount",b)})}else c.emit("patchAccount",b)}),c.on("patchAccount",function(b){if(b.roles.account){var d={user:{id:a.params.id,name:b.username}};a.app.db.models.Account.findByIdAndUpdate(b.roles.account,d,function(a){return a?c.emit("exception",a):void c.emit("populateRoles",b)})}else c.emit("populateRoles",b)}),c.on("populateRoles",function(a){a.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,void c.emit("response"))})}),c.emit("validate")},exports.password=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.body.newPassword||(c.outcome.errfor.newPassword="required"),a.body.confirm||(c.outcome.errfor.confirm="required"),a.body.newPassword!==a.body.confirm&&c.outcome.errors.push("Passwords do not match."),c.hasErrors()?c.emit("response"):void c.emit("patchUser")}),c.on("patchUser",function(){a.app.db.models.User.encryptPassword(a.body.newPassword,function(b,d){if(b)return c.emit("exception",b);var e={password:d};a.app.db.models.User.findByIdAndUpdate(a.params.id,e,function(a,b){return a?c.emit("exception",a):void b.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,c.outcome.newPassword="",c.outcome.confirm="",void c.emit("response"))})})})}),c.emit("validate")},exports.linkAdmin=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.user.roles.admin.isMemberOf("root")?a.body.newAdminId?void c.emit("verifyAdmin"):(c.outcome.errfor.newAdminId="required",c.emit("response")):(c.outcome.errors.push("You may not link users to admins."),c.emit("response"))}),c.on("verifyAdmin",function(){a.app.db.models.Admin.findById(a.body.newAdminId).exec(function(b,d){return b?c.emit("exception",b):d?d.user.id&&d.user.id!==a.params.id?(c.outcome.errors.push("Admin is already linked to a different user."),c.emit("response")):(c.admin=d,void c.emit("duplicateLinkCheck")):(c.outcome.errors.push("Admin not found."),c.emit("response"))})}),c.on("duplicateLinkCheck",function(){a.app.db.models.User.findOne({"roles.admin":a.body.newAdminId,_id:{$ne:a.params.id}}).exec(function(a,b){return a?c.emit("exception",a):b?(c.outcome.errors.push("Another user is already linked to that admin."),c.emit("response")):void c.emit("patchUser")})}),c.on("patchUser",function(){a.app.db.models.User.findById(a.params.id).exec(function(b,d){return b?c.emit("exception",b):(d.roles.admin=a.body.newAdminId,void d.save(function(a,b){return a?c.emit("exception",a):void b.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,void c.emit("patchAdmin"))})}))})}),c.on("patchAdmin",function(){c.admin.user={id:a.params.id,name:c.outcome.user.username},c.admin.save(function(a){return a?c.emit("exception",a):void c.emit("response")})}),c.emit("validate")},exports.unlinkAdmin=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.user.roles.admin.isMemberOf("root")?a.user._id===a.params.id?(c.outcome.errors.push("You may not unlink yourself from admin."),c.emit("response")):void c.emit("patchUser"):(c.outcome.errors.push("You may not unlink users from admins."),c.emit("response"))}),c.on("patchUser",function(){a.app.db.models.User.findById(a.params.id).exec(function(a,b){if(a)return c.emit("exception",a);if(!b)return c.outcome.errors.push("User was not found."),c.emit("response");var d=b.roles.admin;b.roles.admin=null,b.save(function(a,b){return a?c.emit("exception",a):void b.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,void c.emit("patchAdmin",d))})})})}),c.on("patchAdmin",function(b){a.app.db.models.Admin.findById(b).exec(function(a,b){return a?c.emit("exception",a):b?(b.user=void 0,void b.save(function(a){return a?c.emit("exception",a):void c.emit("response")})):(c.outcome.errors.push("Admin was not found."),c.emit("response"))})}),c.emit("validate")},exports.linkAccount=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.user.roles.admin.isMemberOf("root")?a.body.newAccountId?void c.emit("verifyAccount"):(c.outcome.errfor.newAccountId="required",c.emit("response")):(c.outcome.errors.push("You may not link users to accounts."),c.emit("response"))}),c.on("verifyAccount",function(){a.app.db.models.Account.findById(a.body.newAccountId).exec(function(b,d){return b?c.emit("exception",b):d?d.user.id&&d.user.id!==a.params.id?(c.outcome.errors.push("Account is already linked to a different user."),c.emit("response")):(c.account=d,void c.emit("duplicateLinkCheck")):(c.outcome.errors.push("Account not found."),c.emit("response"))})}),c.on("duplicateLinkCheck",function(){a.app.db.models.User.findOne({"roles.account":a.body.newAccountId,_id:{$ne:a.params.id}}).exec(function(a,b){return a?c.emit("exception",a):b?(c.outcome.errors.push("Another user is already linked to that account."),c.emit("response")):void c.emit("patchUser")})}),c.on("patchUser",function(){a.app.db.models.User.findById(a.params.id).exec(function(b,d){return b?c.emit("exception",b):(d.roles.account=a.body.newAccountId,void d.save(function(a,b){return a?c.emit("exception",a):void b.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,void c.emit("patchAccount"))})}))})}),c.on("patchAccount",function(){c.account.user={id:a.params.id,name:c.outcome.user.username},c.account.save(function(a){return a?c.emit("exception",a):void c.emit("response")})}),c.emit("validate")},exports.unlinkAccount=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.user.roles.admin.isMemberOf("root")?void c.emit("patchUser"):(c.outcome.errors.push("You may not unlink users from accounts."),c.emit("response"))}),c.on("patchUser",function(){a.app.db.models.User.findById(a.params.id).exec(function(a,b){if(a)return c.emit("exception",a);if(!b)return c.outcome.errors.push("User was not found."),c.emit("response");var d=b.roles.account;b.roles.account=null,b.save(function(a,b){return a?c.emit("exception",a):void b.populate("roles.admin roles.account","name.full",function(a,b){return a?c.emit("exception",a):(c.outcome.user=b,void c.emit("patchAccount",d))})})})}),c.on("patchAccount",function(b){a.app.db.models.Account.findById(b).exec(function(a,b){return a?c.emit("exception",a):b?(b.user=void 0,void b.save(function(a){return a?c.emit("exception",a):void c.emit("response")})):(c.outcome.errors.push("Account was not found."),c.emit("response"))})}),c.emit("validate")},exports["delete"]=function(a,b){var c=a.app.utility.workflow(a,b);c.on("validate",function(){return a.user.roles.admin.isMemberOf("root")?a.user._id===a.params.id?(c.outcome.errors.push("You may not delete yourself from user."),c.emit("response")):void c.emit("deleteUser"):(c.outcome.errors.push("You may not delete users."),c.emit("response"))}),c.on("deleteUser",function(){a.app.db.models.User.findByIdAndRemove(a.params.id,function(a){return a?c.emit("exception",a):void c.emit("response")})}),c.emit("validate")};
//# sourceMappingURL=index%20(2).min.js.map